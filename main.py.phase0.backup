#!/usr/bin/env python3
"""
ReqIF Tool Suite - Apple Design Guidelines Version with Advanced Comparison
Enhanced with Phase 1: Advanced Comparison Settings integration
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os
import threading
from typing import Optional, Dict, Any

# Import core modules
from reqif_parser import ReqIFParser
from reqif_comparator import ReqIFComparator
from comparison_gui import ComparisonResultsGUI
from visualizer_gui import VisualizerGUI
from error_handler import ErrorHandler
from theme_manager import (
    configure_main_window, apply_theme, get_color, get_semantic_color,
    create_title_label, create_body_label, create_primary_button, 
    create_secondary_button, create_section_separator, Spacing,
    AppleColors, AppleFonts, style_text_widget
)

# Import Phase 1: Advanced Comparison components
try:
    from advanced_comparison_settings import show_advanced_comparison_settings
    from comparison_profile import ComparisonProfile, ProfileManager
    from attribute_analyzer import analyze_requirements_for_profile
    ADVANCED_COMPARISON_AVAILABLE = True
    print("✅ Advanced Comparison Settings loaded")
except ImportError as e:
    ADVANCED_COMPARISON_AVAILABLE = False
    print(f"⚠️ Advanced Comparison not available: {e}")


class ReqIFToolMVP:
    """
    ReqIF Tool Suite with Apple Design Guidelines and Advanced Comparison
    Phase 1: Complete integration of advanced comparison settings
    """
    
    def __init__(self):
        # Initialize error handling
        self.error_handler = ErrorHandler()
        
        # Create main window
        self.root = tk.Tk()
        self.root.title("Beyond ReqIF v1.2.0 - Professional Edition")
        self.root.geometry("1100x750")
        
        # Apply Apple Design Guidelines
        configure_main_window(self.root)
        
        # Initialize components
        self.parser = ReqIFParser()
        self.comparator = ReqIFComparator()
        
        # Phase 1: Advanced Comparison components
        if ADVANCED_COMPARISON_AVAILABLE:
            self.profile_manager = ProfileManager()
            self.profile_manager.load_profiles_from_directory()
            self.current_profile = self._get_default_profile()
            self._apply_profile_to_comparator()
        else:
            self.profile_manager = None
            self.current_profile = None
        
        # File tracking
        self.file1_path = tk.StringVar()
        self.file2_path = tk.StringVar()
        self.visualize_file_path = tk.StringVar()
        
        # UI state
        self.comparison_window = None
        self.visualizer_window = None
        
        # Phase 1: Requirements cache for profile analysis
        self.requirements1_cache = None
        self.requirements2_cache = None
        
        # Create UI
        self._create_main_ui()
        
        # Setup monitoring
        self._setup_monitoring()
    
    def _get_default_profile(self) -> ComparisonProfile:
        """Get or create default comparison profile"""
        try:
            # Try to load saved default profile
            profiles = self.profile_manager.list_profiles()
            if "Default" in profiles:
                return self.profile_manager.get_profile("Default")
            elif "detailed" in profiles:
                return self.profile_manager.get_profile("detailed")
            else:
                # Create basic default profile
                default_profile = ComparisonProfile("Default")
                default_profile.description = "Default comparison settings"
                return default_profile
        except Exception as e:
            print(f"Warning: Could not load default profile: {e}")
            return ComparisonProfile("Default")
    
    def _apply_profile_to_comparator(self):
        """Apply current profile to the comparator"""
        if self.current_profile and ADVANCED_COMPARISON_AVAILABLE:
            self.comparator.set_comparison_profile(self.current_profile)
            print(f"Applied profile: {self.current_profile.name}")
    
    def _create_main_ui(self):
        """Create Apple-styled UI with advanced comparison integration"""
        # Create main container with proper padding
        self.main_frame = ttk.Frame(self.root, padding="24")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights for responsive design
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        self.main_frame.columnconfigure(0, weight=1)
        self.main_frame.rowconfigure(2, weight=1)
        
        # Create sections
        self._create_header()
        self._create_main_content()
        self._create_status_bar()
    
    def _create_header(self):
        """Create Apple-style header with profile info"""
        header_frame = ttk.Frame(self.main_frame)
        header_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, Spacing.XXL))
        header_frame.columnconfigure(1, weight=1)
        
        # Left side - Title and description
        title_frame = ttk.Frame(header_frame)
        title_frame.grid(row=0, column=0, sticky=(tk.W))
        
        title_label = create_title_label(title_frame, "Beyond ReqIF", "title_1")
        title_label.grid(row=0, column=0, sticky=(tk.W))
        
        version_label = create_body_label(title_frame, "Professional Edition v1.2.0", secondary=True)
        version_label.grid(row=1, column=0, sticky=(tk.W), pady=(2, 0))
        
        subtitle_label = create_body_label(title_frame, "Advanced Requirements Analysis and Comparison", secondary=True)
        subtitle_label.grid(row=2, column=0, sticky=(tk.W), pady=(4, 0))
        
        # Right side - Profile info and quick actions
        info_frame = ttk.Frame(header_frame)
        info_frame.grid(row=0, column=1, sticky=(tk.E))
        
        # Current profile indicator
        if ADVANCED_COMPARISON_AVAILABLE and self.current_profile:
            profile_frame = ttk.Frame(info_frame)
            profile_frame.grid(row=0, column=0, sticky=(tk.E), pady=(0, 4))
            
            profile_label = create_body_label(profile_frame, "Active Profile:", secondary=True)
            profile_label.grid(row=0, column=0, sticky=(tk.E), padx=(0, 4))
            
            self.profile_name_label = create_body_label(profile_frame, self.current_profile.name)
            self.profile_name_label.grid(row=0, column=1, sticky=(tk.E))
            self.profile_name_label.configure(foreground=get_semantic_color("info"))
        
        # File format support info
        support_label = create_body_label(info_frame, "Supports: ReqIF • ReqIFZ", secondary=True)
        support_label.grid(row=1, column=0, sticky=(tk.E))
        
        # Add subtle separator
        separator = create_section_separator(self.main_frame)
        separator.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, Spacing.XL))
    
    def _create_main_content(self):
        """Create main content with Apple-styled tabs"""
        # Create notebook with Apple styling
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Create tabs
        self._create_compare_tab()
        self._create_visualize_tab()
        self._create_about_tab()
    
    def _create_compare_tab(self):
        """Create Apple-styled comparison tab with advanced settings"""
        compare_frame = ttk.Frame(self.notebook, padding="30")
        self.notebook.add(compare_frame, text="Compare Files")
        
        # Configure grid
        compare_frame.columnconfigure(0, weight=1)
        compare_frame.rowconfigure(4, weight=1)
        
        # Section header
        section_header = create_title_label(compare_frame, "File Comparison", "headline")
        section_header.grid(row=0, column=0, sticky=(tk.W), pady=(0, Spacing.L))
        
        description = create_body_label(compare_frame, 
                                       "Compare two ReqIF files to identify added, deleted, and modified requirements with advanced settings", 
                                       secondary=True)
        description.grid(row=1, column=0, sticky=(tk.W), pady=(0, Spacing.XXL))
        
        # File selection area
        files_frame = ttk.LabelFrame(compare_frame, text="Select Files", padding="20")
        files_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(0, Spacing.L))
        files_frame.columnconfigure(1, weight=1)
        
        # File 1 selection
        file1_label = create_body_label(files_frame, "Original File:")
        file1_label.grid(row=0, column=0, sticky=(tk.W), pady=(0, 8), padx=(0, Spacing.M))
        
        file1_entry = ttk.Entry(files_frame, textvariable=self.file1_path, width=50,
                               font=AppleFonts.get("body"))
        file1_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=(0, 8), padx=(0, Spacing.M))
        
        file1_btn = create_secondary_button(files_frame, "Browse", self._browse_file1)
        file1_btn.grid(row=0, column=2, pady=(0, 8))
        
        # File 2 selection
        file2_label = create_body_label(files_frame, "Modified File:")
        file2_label.grid(row=1, column=0, sticky=(tk.W), pady=(8, 0), padx=(0, Spacing.M))
        
        file2_entry = ttk.Entry(files_frame, textvariable=self.file2_path, width=50,
                               font=AppleFonts.get("body"))
        file2_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=(8, 0), padx=(0, Spacing.M))
        
        file2_btn = create_secondary_button(files_frame, "Browse", self._browse_file2)
        file2_btn.grid(row=1, column=2, pady=(8, 0))
        
        # Phase 1: Advanced Settings Section
        if ADVANCED_COMPARISON_AVAILABLE:
            settings_frame = ttk.LabelFrame(compare_frame, text="Comparison Settings", padding="20")
            settings_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(Spacing.L, Spacing.L))
            settings_frame.columnconfigure(2, weight=1)
            
            # Profile selection
            profile_label = create_body_label(settings_frame, "Profile:")
            profile_label.grid(row=0, column=0, sticky=(tk.W), padx=(0, Spacing.M))
            
            self.profile_var = tk.StringVar(value=self.current_profile.name if self.current_profile else "Default")
            self.profile_combo = ttk.Combobox(settings_frame, textvariable=self.profile_var, 
                                             state='readonly', width=25)
            self.profile_combo.grid(row=0, column=1, sticky=(tk.W), padx=(0, Spacing.M))
            self.profile_combo.bind('<<ComboboxSelected>>', self._on_profile_change)
            self._update_profile_dropdown()
            
            # Advanced settings button
            self.advanced_btn = create_secondary_button(settings_frame, "Advanced Settings...", 
                                                       self._open_advanced_settings)
            self.advanced_btn.grid(row=0, column=3, sticky=(tk.E))
            
            # Profile info
            self.profile_info_label = create_body_label(settings_frame, "", secondary=True)
            self.profile_info_label.grid(row=1, column=0, columnspan=4, sticky=(tk.W), pady=(8, 0))
            self._update_profile_info()
        
        # Controls section
        controls_frame = ttk.Frame(compare_frame)
        controls_frame.grid(row=4, column=0, sticky=(tk.W, tk.E), pady=(0, Spacing.L))
        controls_frame.columnconfigure(1, weight=1)
        
        # Primary action button
        self.compare_btn = create_primary_button(controls_frame, "Compare Files", self._compare_files)
        self.compare_btn.grid(row=0, column=0, sticky=(tk.W))
        
        # Status information
        self.compare_status_label = create_body_label(controls_frame, 
                                                     "Select two ReqIF files to begin comparison", 
                                                     secondary=True)
        self.compare_status_label.grid(row=0, column=1, sticky=(tk.W), padx=(Spacing.L, 0))
        
        # Help text
        help_frame = ttk.Frame(compare_frame)
        help_frame.grid(row=5, column=0, sticky=(tk.W, tk.E))
        
        help_text = create_body_label(help_frame, 
                                     "💡 Tip: Use Advanced Settings to customize which attributes to compare and their importance",
                                     secondary=True)
        help_text.grid(row=0, column=0, sticky=(tk.W))
    
    def _update_profile_dropdown(self):
        """Update the profile selection dropdown"""
        if not ADVANCED_COMPARISON_AVAILABLE:
            return
        
        try:
            profiles = self.profile_manager.list_profiles()
            self.profile_combo['values'] = profiles
            
            # Ensure current profile is selected
            if self.current_profile and self.current_profile.name in profiles:
                self.profile_var.set(self.current_profile.name)
            elif profiles:
                self.profile_var.set(profiles[0])
        except Exception as e:
            print(f"Error updating profile dropdown: {e}")
    
    def _update_profile_info(self):
        """Update profile information display"""
        if not ADVANCED_COMPARISON_AVAILABLE or not hasattr(self, 'profile_info_label'):
            return
        
        try:
            if self.current_profile:
                enabled_count = len(self.current_profile.get_enabled_attributes())
                total_weight = self.current_profile.calculate_total_weight()
                threshold = self.current_profile.similarity_threshold
                
                info_text = f"✓ {enabled_count} attributes enabled, Total weight: {total_weight:.1f}, Threshold: {threshold:.0%}"
                self.profile_info_label.configure(text=info_text, foreground=get_semantic_color("success"))
                
                # Update header profile name
                if hasattr(self, 'profile_name_label'):
                    self.profile_name_label.configure(text=self.current_profile.name)
            else:
                self.profile_info_label.configure(text="No profile selected", 
                                                foreground=get_semantic_color("warning"))
        except Exception as e:
            print(f"Error updating profile info: {e}")
    
    def _on_profile_change(self, event=None):
        """Handle profile selection change"""
        if not ADVANCED_COMPARISON_AVAILABLE:
            return
        
        try:
            profile_name = self.profile_var.get()
            new_profile = self.profile_manager.get_profile(profile_name)
            
            if new_profile:
                self.current_profile = new_profile
                self._apply_profile_to_comparator()
                self._update_profile_info()
                
                self._show_success(f"Profile changed to: {profile_name}")
            else:
                self._show_warning("Profile Error", f"Could not load profile: {profile_name}")
        except Exception as e:
            self._show_error("Profile Error", f"Failed to change profile: {str(e)}")
    
    def _open_advanced_settings(self):
        """Open advanced comparison settings dialog"""
        if not ADVANCED_COMPARISON_AVAILABLE:
            self._show_warning("Not Available", "Advanced comparison settings are not available.")
            return
        
        try:
            # Get requirements for analysis if files are selected
            requirements1 = None
            requirements2 = None
            
            if self.file1_path.get() and self.file2_path.get():
                self._show_progress("Analyzing files for advanced settings...")
                
                # Parse files for attribute analysis
                try:
                    if not self.requirements1_cache or not self.requirements2_cache:
                        requirements1 = self.parser.parse_file(self.file1_path.get())
                        requirements2 = self.parser.parse_file(self.file2_path.get())
                        # Cache for future use
                        self.requirements1_cache = requirements1
                        self.requirements2_cache = requirements2
                    else:
                        requirements1 = self.requirements1_cache
                        requirements2 = self.requirements2_cache
                except Exception as e:
                    print(f"Warning: Could not parse files for analysis: {e}")
                    # Continue without analysis
            
            # Open advanced settings dialog
            result_profile = show_advanced_comparison_settings(
                self.root, 
                requirements1, 
                requirements2, 
                self.current_profile
            )
            
            # Apply result if user clicked OK
            if result_profile:
                self.current_profile = result_profile
                self._apply_profile_to_comparator()
                self._update_profile_dropdown()
                self._update_profile_info()
                
                # Save profile if it's new or modified
                try:
                    if not result_profile.is_system_profile:
                        self.profile_manager.save_profile(result_profile)
                        self._update_profile_dropdown()
                except Exception as e:
                    print(f"Warning: Could not save profile: {e}")
                
                self._show_success(f"Advanced settings applied: {result_profile.name}")
            
        except Exception as e:
            self._show_error("Advanced Settings Error", f"Failed to open advanced settings:\n{str(e)}")
        finally:
            self.status_label.configure(text="Ready", foreground=get_color("fg_secondary"))
    
    def _create_visualize_tab(self):
        """Create Apple-styled visualization tab (unchanged)"""
        visualize_frame = ttk.Frame(self.notebook, padding="30")
        self.notebook.add(visualize_frame, text="Analyze File")
        
        # Configure grid
        visualize_frame.columnconfigure(0, weight=1)
        visualize_frame.rowconfigure(3, weight=1)
        
        # Section header
        section_header = create_title_label(visualize_frame, "File Analysis", "headline")
        section_header.grid(row=0, column=0, sticky=(tk.W), pady=(0, Spacing.L))
        
        description = create_body_label(visualize_frame,
                                       "Analyze and explore the structure and content of a single ReqIF file",
                                       secondary=True)
        description.grid(row=1, column=0, sticky=(tk.W), pady=(0, Spacing.XXL))
        
        # File selection
        file_frame = ttk.LabelFrame(visualize_frame, text="Select File", padding="20")
        file_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(0, Spacing.XL))
        file_frame.columnconfigure(1, weight=1)
        
        file_label = create_body_label(file_frame, "ReqIF File:")
        file_label.grid(row=0, column=0, sticky=(tk.W), padx=(0, Spacing.M))
        
        file_entry = ttk.Entry(file_frame, textvariable=self.visualize_file_path, width=50,
                              font=AppleFonts.get("body"))
        file_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, Spacing.M))
        
        file_btn = create_secondary_button(file_frame, "Browse", self._browse_visualize_file)
        file_btn.grid(row=0, column=2)
        
        # Controls section
        controls_frame = ttk.Frame(visualize_frame)
        controls_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(0, Spacing.L))
        controls_frame.columnconfigure(1, weight=1)
        
        # Primary action button
        self.visualize_btn = create_primary_button(controls_frame, "Analyze File", self._visualize_file)
        self.visualize_btn.grid(row=0, column=0, sticky=(tk.W))
        
        # Status information
        self.visualize_status_label = create_body_label(controls_frame,
                                                       "Select a ReqIF file to explore and analyze",
                                                       secondary=True)
        self.visualize_status_label.grid(row=0, column=1, sticky=(tk.W), padx=(Spacing.L, 0))
        
        # Features list
        features_frame = ttk.Frame(visualize_frame)
        features_frame.grid(row=4, column=0, sticky=(tk.W, tk.E))
        
        features_text = create_body_label(features_frame,
                                         "📊 Features: Statistics • Search & Filter • Data Export • Requirement Details",
                                         secondary=True)
        features_text.grid(row=0, column=0, sticky=(tk.W))
    
    def _create_about_tab(self):
        """Create Apple-styled about tab with Phase 1 info"""
        about_frame = ttk.Frame(self.notebook, padding="30")
        self.notebook.add(about_frame, text="About")
        
        # Configure for center alignment
        about_frame.columnconfigure(0, weight=1)
        about_frame.rowconfigure(1, weight=1)
        
        # Content container
        content_frame = ttk.Frame(about_frame)
        content_frame.grid(row=1, column=0)
        
        # App info
        app_title = create_title_label(content_frame, "Beyond ReqIF", "large_title")
        app_title.grid(row=0, column=0, pady=(0, Spacing.S))
        
        version_label = create_body_label(content_frame, "Professional Edition v1.2.0", secondary=True)
        version_label.grid(row=1, column=0, pady=(0, Spacing.XL))
        
        # Description
        description_text = """A professional tool for working with ReqIF (Requirements Interchange Format) files.
        
Built with Apple Design Guidelines and advanced comparison capabilities."""
        
        description_label = create_body_label(content_frame, description_text)
        description_label.grid(row=2, column=0, pady=(0, Spacing.XL))
        
        # Features
        features_title = create_title_label(content_frame, "Features", "headline")
        features_title.grid(row=3, column=0, pady=(0, Spacing.M), sticky=(tk.W))
        
        features = [
            "• Parse and analyze ReqIF and ReqIFZ files",
            "• Compare requirements between file versions",
            "• Advanced comparison with customizable profiles",
            "• Weighted attribute comparison and analysis",
            "• Intelligent attribute discovery and recommendation",
            "• Export analysis results to CSV",
            "• Professional Apple-inspired interface",
            "• Built-in error handling and recovery"
        ]
        
        for i, feature in enumerate(features):
            feature_label = create_body_label(content_frame, feature)
            feature_label.grid(row=4+i, column=0, sticky=(tk.W), pady=2)
        
        # Phase 1 info
        if ADVANCED_COMPARISON_AVAILABLE:
            phase1_title = create_title_label(content_frame, "Advanced Comparison (Phase 1)", "headline")
            phase1_title.grid(row=12, column=0, pady=(Spacing.L, Spacing.S), sticky=(tk.W))
            
            profiles_count = len(self.profile_manager.list_profiles()) if self.profile_manager else 0
            enabled_attrs = len(self.current_profile.get_enabled_attributes()) if self.current_profile else 0
            
            phase1_info = [
                f"• {profiles_count} comparison profiles available",
                f"• {enabled_attrs} attributes enabled in current profile",
                "• Intelligent attribute analysis and recommendations",
                "• Customizable comparison weights and thresholds"
            ]
            
            for i, info in enumerate(phase1_info):
                info_label = create_body_label(content_frame, info, secondary=True)
                info_label.grid(row=13+i, column=0, sticky=(tk.W), pady=2)
        
        # System info
        separator2 = create_section_separator(content_frame)
        separator2.grid(row=20, column=0, sticky=(tk.W, tk.E), pady=Spacing.L)
        
        system_title = create_title_label(content_frame, "System Information", "headline")
        system_title.grid(row=21, column=0, pady=(Spacing.M, Spacing.S), sticky=(tk.W))
        
        import sys
        python_version = f"Python {sys.version.split()[0]}"
        platform_info = f"Platform: {sys.platform}"
        
        python_label = create_body_label(content_frame, python_version, secondary=True)
        python_label.grid(row=22, column=0, sticky=(tk.W), pady=2)
        
        platform_label = create_body_label(content_frame, platform_info, secondary=True)
        platform_label.grid(row=23, column=0, sticky=(tk.W), pady=2)
    
    def _create_status_bar(self):
        """Create Apple-styled status bar with profile info"""
        status_frame = ttk.Frame(self.main_frame)
        status_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(Spacing.L, 0))
        status_frame.columnconfigure(0, weight=1)
        
        # Add subtle separator above status bar
        separator = ttk.Separator(status_frame, orient='horizontal')
        separator.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, Spacing.S))
        
        # Status content
        status_content = ttk.Frame(status_frame)
        status_content.grid(row=1, column=0, sticky=(tk.W, tk.E))
        status_content.columnconfigure(1, weight=1)
        
        self.status_label = create_body_label(status_content, "Ready", secondary=True)
        self.status_label.grid(row=0, column=0, sticky=(tk.W))
        
        # Right side status info
        right_status = ttk.Frame(status_content)
        right_status.grid(row=0, column=2, sticky=(tk.E))
        
        # Advanced comparison indicator
        if ADVANCED_COMPARISON_AVAILABLE:
            advanced_indicator = create_body_label(right_status, "Advanced Comparison: Enabled", secondary=True)
            advanced_indicator.grid(row=0, column=0, sticky=(tk.E), padx=(0, Spacing.M))
            advanced_indicator.configure(foreground=get_semantic_color("success"))
        
        # Version indicator
        version_indicator = create_body_label(right_status, "v1.2.0", secondary=True)
        version_indicator.grid(row=0, column=1, sticky=(tk.E))
    
    def _setup_monitoring(self):
        """Setup file path monitoring with enhanced feedback"""
        def update_button_states(*args):
            self._update_button_states()
        
        self.file1_path.trace_add("write", update_button_states)
        self.file2_path.trace_add("write", update_button_states)
        self.visualize_file_path.trace_add("write", update_button_states)
        
        # Clear requirements cache when files change
        def clear_cache(*args):
            self.requirements1_cache = None
            self.requirements2_cache = None
        
        self.file1_path.trace_add("write", clear_cache)
        self.file2_path.trace_add("write", clear_cache)
        
        self._update_button_states()
    
    def _update_button_states(self):
        """Update button states with enhanced visual feedback"""
        # Compare button state
        has_both_files = bool(self.file1_path.get() and self.file2_path.get())
        self.compare_btn.configure(state=tk.NORMAL if has_both_files else tk.DISABLED)
        
        if has_both_files:
            profile_name = self.current_profile.name if self.current_profile else "Default"
            self.compare_status_label.configure(text=f"✓ Ready to compare with profile: {profile_name}")
            self.compare_status_label.configure(foreground=get_semantic_color("success"))
        else:
            self.compare_status_label.configure(text="Select two ReqIF files to begin comparison")
            self.compare_status_label.configure(foreground=get_color("fg_secondary"))
        
        # Enable advanced settings button only when files are selected (for analysis)
        if ADVANCED_COMPARISON_AVAILABLE and hasattr(self, 'advanced_btn'):
            # Always enable advanced settings, but analysis only works with files
            self.advanced_btn.configure(state=tk.NORMAL)
        
        # Visualize button state
        has_visualize_file = bool(self.visualize_file_path.get())
        self.visualize_btn.configure(state=tk.NORMAL if has_visualize_file else tk.DISABLED)
        
        if has_visualize_file:
            self.visualize_status_label.configure(text="✓ Ready to analyze file")
            self.visualize_status_label.configure(foreground=get_semantic_color("success"))
        else:
            self.visualize_status_label.configure(text="Select a ReqIF file to explore and analyze")
            self.visualize_status_label.configure(foreground=get_color("fg_secondary"))
    
    # =============================================================================
    # FILE OPERATIONS WITH ENHANCED USER FEEDBACK
    # =============================================================================
    
    def _browse_file1(self):
        """Browse for first file with enhanced feedback"""
        try:
            filename = filedialog.askopenfilename(
                title="Select Original ReqIF File",
                filetypes=[
                    ("ReqIF files", "*.reqif"),
                    ("ReqIF archives", "*.reqifz"),
                    ("All files", "*.*")
                ]
            )
            if filename:
                self.file1_path.set(filename)
                # Enhanced status feedback
                basename = os.path.basename(filename)
                self.status_label.configure(text=f"Original file selected: {basename}")
                self.status_label.configure(foreground=get_semantic_color("info"))
        except Exception as e:
            self._show_error("File Selection Error", f"Failed to select original file:\n{str(e)}")
    
    def _browse_file2(self):
        """Browse for second file with enhanced feedback"""
        try:
            filename = filedialog.askopenfilename(
                title="Select Modified ReqIF File",
                filetypes=[
                    ("ReqIF files", "*.reqif"),
                    ("ReqIF archives", "*.reqifz"),
                    ("All files", "*.*")
                ]
            )
            if filename:
                self.file2_path.set(filename)
                # Enhanced status feedback
                basename = os.path.basename(filename)
                self.status_label.configure(text=f"Modified file selected: {basename}")
                self.status_label.configure(foreground=get_semantic_color("info"))
        except Exception as e:
            self._show_error("File Selection Error", f"Failed to select modified file:\n{str(e)}")
    
    def _browse_visualize_file(self):
        """Browse for visualization file with enhanced feedback"""
        try:
            filename = filedialog.askopenfilename(
                title="Select ReqIF File to Analyze",
                filetypes=[
                    ("ReqIF files", "*.reqif"),
                    ("ReqIF archives", "*.reqifz"),
                    ("All files", "*.*")
                ]
            )
            if filename:
                self.visualize_file_path.set(filename)
                # Enhanced status feedback
                basename = os.path.basename(filename)
                self.status_label.configure(text=f"Analysis file selected: {basename}")
                self.status_label.configure(foreground=get_semantic_color("info"))
        except Exception as e:
            self._show_error("File Selection Error", f"Failed to select analysis file:\n{str(e)}")
    
    def _compare_files(self):
        """Compare files with enhanced progress feedback and profile integration"""
        if not (self.file1_path.get() and self.file2_path.get()):
            self._show_warning("Missing Files", "Please select both files to compare.")
            return
        
        # Enhanced progress feedback with profile info
        profile_name = self.current_profile.name if self.current_profile else "Default"
        self._show_progress(f"Initializing comparison with profile: {profile_name}...")
        self.compare_btn.configure(state=tk.DISABLED, text="Comparing...")
        self.root.update()
        
        def compare_in_thread():
            try:
                # Parse files with progress updates
                self.root.after_idle(lambda: self._show_progress("Parsing original file..."))
                file1_reqs = self.parser.parse_file(self.file1_path.get())
                
                self.root.after_idle(lambda: self._show_progress("Parsing modified file..."))
                file2_reqs = self.parser.parse_file(self.file2_path.get())
                
                # Cache requirements for advanced settings
                self.requirements1_cache = file1_reqs
                self.requirements2_cache = file2_reqs
                
                # Apply current profile to comparator
                if ADVANCED_COMPARISON_AVAILABLE and self.current_profile:
                    self.root.after_idle(lambda: self._show_progress(f"Applying profile: {self.current_profile.name}..."))
                    self.comparator.set_comparison_profile(self.current_profile)
                
                # Compare with progress
                self.root.after_idle(lambda: self._show_progress("Analyzing differences..."))
                results = self.comparator.compare_requirements(file1_reqs, file2_reqs)
                
                # Add profile information to results
                if ADVANCED_COMPARISON_AVAILABLE and self.current_profile:
                    results['profile_info'] = {
                        'name': self.current_profile.name,
                        'description': self.current_profile.description,
                        'enabled_attributes': len(self.current_profile.get_enabled_attributes()),
                        'total_weight': self.current_profile.calculate_total_weight(),
                        'similarity_threshold': self.current_profile.similarity_threshold,
                        'profile_summary': self.current_profile.get_summary()
                    }
                
                # Show results
                def show_results():
                    try:
                        self.comparison_window = ComparisonResultsGUI(self.root, results)
                        # Enhanced success feedback with profile info
                        stats = results.get('statistics', {})
                        changes = stats.get('added_count', 0) + stats.get('deleted_count', 0) + stats.get('modified_count', 0)
                        self._show_success(f"Comparison complete - {changes} changes found using {profile_name}")
                        self.compare_btn.configure(state=tk.NORMAL, text="Compare Files")
                    except Exception as e:
                        self._show_error("Results Error", f"Failed to display results:\n{str(e)}")
                        self.compare_btn.configure(state=tk.NORMAL, text="Compare Files")
                
                self.root.after_idle(show_results)
                
            except Exception as e:
                error_message = str(e)
                def show_error():
                    self._show_error("Comparison Failed", f"File comparison failed:\n{error_message}")
                    self.compare_btn.configure(state=tk.NORMAL, text="Compare Files")
                
                self.root.after_idle(show_error)
        
        threading.Thread(target=compare_in_thread, daemon=True).start()
    
    def _visualize_file(self):
        """Visualize file with enhanced progress feedback (unchanged)"""
        if not self.visualize_file_path.get():
            self._show_warning("Missing File", "Please select a file to analyze.")
            return
        
        # Enhanced progress feedback
        self._show_progress("Initializing analysis...")
        self.visualize_btn.configure(state=tk.DISABLED, text="Analyzing...")
        self.root.update()
        
        def visualize_in_thread():
            try:
                # Parse file with progress
                self.root.after_idle(lambda: self._show_progress("Parsing ReqIF file..."))
                requirements = self.parser.parse_file(self.visualize_file_path.get())
                
                # Show visualizer
                def show_visualizer():
                    try:
                        self.visualizer_window = VisualizerGUI(
                            self.root, 
                            requirements, 
                            self.visualize_file_path.get()
                        )
                        # Enhanced success feedback
                        self._show_success(f"Analysis complete - {len(requirements)} requirements loaded")
                        self.visualize_btn.configure(state=tk.NORMAL, text="Analyze File")
                    except Exception as e:
                        self._show_error("Analysis Error", f"Failed to display analysis:\n{str(e)}")
                        self.visualize_btn.configure(state=tk.NORMAL, text="Analyze File")
                
                self.root.after_idle(show_visualizer)
                
            except Exception as e:
                error_message = str(e)
                def show_error():
                    self._show_error("Analysis Failed", f"File analysis failed:\n{error_message}")
                    self.visualize_btn.configure(state=tk.NORMAL, text="Analyze File")
                
                self.root.after_idle(show_error)
        
        threading.Thread(target=visualize_in_thread, daemon=True).start()
    
    # =============================================================================
    # ENHANCED FEEDBACK METHODS
    # =============================================================================
    
    def _show_progress(self, message):
        """Show progress message with appropriate styling"""
        self.status_label.configure(text=message, foreground=get_semantic_color("info"))
    
    def _show_success(self, message):
        """Show success message with appropriate styling"""
        self.status_label.configure(text=message, foreground=get_semantic_color("success"))
    
    def _show_error(self, title, message):
        """Show error with enhanced styling"""
        self.status_label.configure(text="Error occurred - Check details", 
                                   foreground=get_semantic_color("error"))
        messagebox.showerror(title, message)
    
    def _show_warning(self, title, message):
        """Show warning with enhanced styling"""
        self.status_label.configure(text="Warning - Check requirements", 
                                   foreground=get_semantic_color("warning"))
        messagebox.showwarning(title, message)
    
    def _show_info(self, title, message):
        """Show info with enhanced styling"""
        self.status_label.configure(text="Information displayed", 
                                   foreground=get_semantic_color("info"))
        messagebox.showinfo(title, message)
    
    def run(self):
        """Run the application with enhanced startup"""
        try:
            # Enhanced startup feedback
            if ADVANCED_COMPARISON_AVAILABLE:
                profile_count = len(self.profile_manager.list_profiles()) if self.profile_manager else 0
                self._show_success(f"Beyond ReqIF ready - Advanced Comparison enabled ({profile_count} profiles)")
            else:
                self._show_success("Beyond ReqIF ready - Basic comparison mode")
            
            # Set focus to first tab
            self.notebook.select(0)
            
            self.root.mainloop()
        except Exception as e:
            self._show_error("Runtime Error", f"Application runtime error:\n{str(e)}")
        finally:
            self._cleanup()
    
    def _cleanup(self):
        """Enhanced cleanup on exit"""
        try:
            # Save current profile as default for next session
            if ADVANCED_COMPARISON_AVAILABLE and self.current_profile:
                try:
                    # You could save preference here
                    pass
                except:
                    pass
            
            if self.comparison_window:
                try:
                    self.comparison_window.window.destroy()
                except:
                    pass
            if self.visualizer_window:
                try:
                    self.visualizer_window.window.destroy()
                except:
                    pass
        except:
            pass


def main():
    """Main function with enhanced error handling"""
    try:
        print("Starting Beyond ReqIF v1.2.0 with Apple Design Guidelines and Advanced Comparison...")
        app = ReqIFToolMVP()
        app.run()
    except Exception as e:
        print(f"Critical startup error: {e}")
        try:
            import traceback
            traceback.print_exc()
            
            # Try to show error dialog with Apple styling
            root = tk.Tk()
            root.withdraw()
            
            # Apply basic Apple styling to error dialog
            configure_main_window(root)
            
            messagebox.showerror(
                "Startup Error", 
                f"Failed to start Beyond ReqIF:\n\n{str(e)}\n\n"
                "Please check the console for detailed error information."
            )
            root.destroy()
        except Exception:
            print("Failed to show error dialog - check console output")


if __name__ == "__main__":
    main()