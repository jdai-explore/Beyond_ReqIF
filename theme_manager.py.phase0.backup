#!/usr/bin/env python3
"""
Apple Design Guidelines Theme Manager - No Theme System
Provides Apple Human Interface Guidelines styling for ReqIF Tool Suite
Simple, clean, and professional appearance following Apple's design principles
"""

import tkinter as tk
from tkinter import ttk

# Apple Design Guidelines Color Palette
class AppleColors:
    """Apple Human Interface Guidelines colors"""
    
    # Primary System Colors
    SYSTEM_BLUE = "#007AFF"
    SYSTEM_GREEN = "#34C759" 
    SYSTEM_ORANGE = "#FF9500"
    SYSTEM_RED = "#FF3B30"
    SYSTEM_YELLOW = "#FFCC00"
    
    # Neutral Colors
    LABEL = "#000000"
    SECONDARY_LABEL = "#6D6D6D" 
    TERTIARY_LABEL = "#999999"
    
    # Backgrounds
    SYSTEM_BACKGROUND = "#FFFFFF"
    SECONDARY_SYSTEM_BACKGROUND = "#F2F2F7"
    GROUPED_BACKGROUND = "#F2F2F7"
    
    # Separators and borders
    SEPARATOR = "#C6C6C8"
    
    # Control colors
    CONTROL_BACKGROUND = "#FFFFFF"
    TEXT_BACKGROUND = "#FFFFFF"
    SELECTED_TEXT_BACKGROUND = SYSTEM_BLUE
    SELECTED_TEXT_COLOR = "#FFFFFF"
    
    # Window
    WINDOW_BACKGROUND = "#ECECEC"


# Font configuration (Apple Typography Guidelines)
class AppleFonts:
    """Apple typography guidelines"""
    
    # Font family fallbacks
    FONT_FAMILY = "Helvetica Neue"  # Works on most systems
    
    # Font sizes (Apple HIG scaled for desktop)
    LARGE_TITLE = 22
    TITLE_1 = 18
    TITLE_2 = 16
    HEADLINE = 14
    BODY = 13
    CALLOUT = 12
    SUBHEAD = 11
    FOOTNOTE = 10
    CAPTION = 9
    
    @classmethod
    def get(cls, size="body", weight="normal"):
        """Get font configuration"""
        size_map = {
            "large_title": cls.LARGE_TITLE,
            "title_1": cls.TITLE_1, 
            "title_2": cls.TITLE_2,
            "headline": cls.HEADLINE,
            "body": cls.BODY,
            "callout": cls.CALLOUT,
            "subhead": cls.SUBHEAD,
            "footnote": cls.FOOTNOTE,
            "caption": cls.CAPTION
        }
        
        font_size = size_map.get(size, cls.BODY)
        return (cls.FONT_FAMILY, font_size, weight)


def get_color(color_name):
    """Get color by semantic name"""
    color_map = {
        # Backgrounds
        "bg": AppleColors.SYSTEM_BACKGROUND,
        "bg_secondary": AppleColors.SECONDARY_SYSTEM_BACKGROUND,
        "bg_grouped": AppleColors.GROUPED_BACKGROUND,
        "window_bg": AppleColors.WINDOW_BACKGROUND,
        
        # Foregrounds  
        "fg": AppleColors.LABEL,
        "fg_secondary": AppleColors.SECONDARY_LABEL,
        "fg_tertiary": AppleColors.TERTIARY_LABEL,
        
        # Semantic colors
        "primary": AppleColors.SYSTEM_BLUE,
        "accent": AppleColors.SYSTEM_BLUE,
        "success": AppleColors.SYSTEM_GREEN,
        "warning": AppleColors.SYSTEM_ORANGE,
        "error": AppleColors.SYSTEM_RED,
        
        # Controls
        "button_bg": AppleColors.SYSTEM_BLUE,
        "button_fg": AppleColors.SELECTED_TEXT_COLOR,
        "entry_bg": AppleColors.TEXT_BACKGROUND,
        "entry_fg": AppleColors.LABEL,
        
        # Borders
        "border": AppleColors.SEPARATOR,
        "separator": AppleColors.SEPARATOR,
        
        # Selection
        "selection_bg": AppleColors.SELECTED_TEXT_BACKGROUND,
        "selection_fg": AppleColors.SELECTED_TEXT_COLOR,
    }
    
    return color_map.get(color_name, AppleColors.LABEL)


def get_semantic_color(status_or_type):
    """Get color for status, type, or priority"""
    semantic_map = {
        # Status colors
        'approved': AppleColors.SYSTEM_GREEN,
        'active': AppleColors.SYSTEM_GREEN,
        'success': AppleColors.SYSTEM_GREEN,
        
        'draft': AppleColors.SYSTEM_ORANGE,
        'pending': AppleColors.SYSTEM_ORANGE,
        'warning': AppleColors.SYSTEM_ORANGE,
        
        'rejected': AppleColors.SYSTEM_RED,
        'failed': AppleColors.SYSTEM_RED,
        'error': AppleColors.SYSTEM_RED,
        'critical': AppleColors.SYSTEM_RED,
        'high': AppleColors.SYSTEM_RED,
        
        'info': AppleColors.SYSTEM_BLUE,
        'medium': AppleColors.SYSTEM_BLUE,
        'normal': AppleColors.SYSTEM_BLUE,
        
        'low': AppleColors.TERTIARY_LABEL,
        'inactive': AppleColors.TERTIARY_LABEL,
    }
    
    if isinstance(status_or_type, str):
        return semantic_map.get(status_or_type.lower(), AppleColors.LABEL)
    return AppleColors.LABEL


def apply_theme(theme_name=None, widget=None):
    """Apply Apple Design Guidelines styling to widget or globally"""
    
    if widget is None:
        # Apply to all windows - find root windows
        for widget_obj in tk._root_children:
            if isinstance(widget_obj, (tk.Tk, tk.Toplevel)):
                _apply_apple_styling(widget_obj)
    else:
        # Apply to specific widget tree
        _apply_apple_styling(widget)


def _apply_apple_styling(root_widget):
    """Apply comprehensive Apple styling to widget tree"""
    
    # Configure root window
    if isinstance(root_widget, (tk.Tk, tk.Toplevel)):
        root_widget.configure(bg=AppleColors.WINDOW_BACKGROUND)
    
    # Get or create ttk style
    try:
        style = ttk.Style(root_widget)
    except:
        style = ttk.Style()
    
    # === FRAME STYLES ===
    style.configure('TFrame',
                   background=AppleColors.SYSTEM_BACKGROUND,
                   borderwidth=0,
                   relief='flat')
    
    # === LABEL STYLES ===
    style.configure('TLabel',
                   background=AppleColors.SYSTEM_BACKGROUND,
                   foreground=AppleColors.LABEL,
                   font=AppleFonts.get("body"))
    
    # Header labels
    style.configure('Title.TLabel',
                   font=AppleFonts.get("title_2", "bold"),
                   foreground=AppleColors.LABEL)
    
    style.configure('Headline.TLabel', 
                   font=AppleFonts.get("headline", "bold"),
                   foreground=AppleColors.LABEL)
    
    style.configure('Secondary.TLabel',
                   foreground=AppleColors.SECONDARY_LABEL,
                   font=AppleFonts.get("callout"))
    
    # === BUTTON STYLES ===
    style.configure('TButton',
                   background=AppleColors.SYSTEM_BLUE,
                   foreground=AppleColors.SELECTED_TEXT_COLOR,
                   borderwidth=0,
                   focuscolor=AppleColors.SYSTEM_BLUE,
                   font=AppleFonts.get("body"),
                   padding=[16, 8])
    
    style.map('TButton',
             background=[('active', '#0056CC'),   # Darker blue on hover
                        ('pressed', '#004499'),    # Even darker on press
                        ('disabled', AppleColors.TERTIARY_LABEL)],
             foreground=[('disabled', AppleColors.TERTIARY_LABEL)])
    
    # Secondary button style
    style.configure('Secondary.TButton',
                   background=AppleColors.SECONDARY_SYSTEM_BACKGROUND,
                   foreground=AppleColors.SYSTEM_BLUE,
                   borderwidth=1,
                   relief='solid',
                   bordercolor=AppleColors.SEPARATOR,
                   font=AppleFonts.get("body"),
                   padding=[16, 8])
    
    style.map('Secondary.TButton',
             background=[('active', AppleColors.GROUPED_BACKGROUND),
                        ('pressed', '#E5E5EA')],
             bordercolor=[('active', AppleColors.SYSTEM_BLUE)])
    
    # === ENTRY STYLES ===
    style.configure('TEntry',
                   background=AppleColors.TEXT_BACKGROUND,
                   foreground=AppleColors.LABEL,
                   borderwidth=1,
                   relief='solid',
                   bordercolor=AppleColors.SEPARATOR,
                   insertcolor=AppleColors.SYSTEM_BLUE,
                   font=AppleFonts.get("body"),
                   padding=[10, 8])
    
    style.map('TEntry',
             bordercolor=[('focus', AppleColors.SYSTEM_BLUE)])
    
    # === COMBOBOX STYLES ===
    style.configure('TCombobox',
                   background=AppleColors.TEXT_BACKGROUND,
                   foreground=AppleColors.LABEL,
                   borderwidth=1,
                   relief='solid',
                   bordercolor=AppleColors.SEPARATOR,
                   font=AppleFonts.get("body"),
                   padding=[10, 8])
    
    # === LABELFRAME STYLES ===
    style.configure('TLabelframe',
                   background=AppleColors.SYSTEM_BACKGROUND,
                   foreground=AppleColors.LABEL,
                   borderwidth=1,
                   relief='solid',
                   bordercolor=AppleColors.SEPARATOR,
                   font=AppleFonts.get("callout", "bold"))
    
    # === NOTEBOOK STYLES ===
    style.configure('TNotebook',
                   background=AppleColors.SECONDARY_SYSTEM_BACKGROUND,
                   borderwidth=0,
                   relief='flat')
    
    style.configure('TNotebook.Tab',
                   background=AppleColors.SECONDARY_SYSTEM_BACKGROUND,
                   foreground=AppleColors.SECONDARY_LABEL,
                   padding=[16, 10],
                   borderwidth=0,
                   relief='flat',
                   font=AppleFonts.get("callout"))
    
    style.map('TNotebook.Tab',
             background=[('selected', AppleColors.SYSTEM_BACKGROUND),
                        ('active', AppleColors.GROUPED_BACKGROUND)],
             foreground=[('selected', AppleColors.LABEL),
                        ('active', AppleColors.LABEL)])
    
    # === TREEVIEW STYLES ===
    style.configure('Treeview',
                   background=AppleColors.SYSTEM_BACKGROUND,
                   foreground=AppleColors.LABEL,
                   borderwidth=1,
                   relief='solid',
                   bordercolor=AppleColors.SEPARATOR,
                   font=AppleFonts.get("body"),
                   rowheight=26)
    
    style.configure('Treeview.Heading',
                   background=AppleColors.SECONDARY_SYSTEM_BACKGROUND,
                   foreground=AppleColors.LABEL,
                   borderwidth=0,
                   relief='flat',
                   font=AppleFonts.get("callout", "bold"))
    
    style.map('Treeview',
             background=[('selected', AppleColors.SELECTED_TEXT_BACKGROUND)],
             foreground=[('selected', AppleColors.SELECTED_TEXT_COLOR)])
    
    # === SCROLLBAR STYLES ===
    style.configure('TScrollbar',
                   background=AppleColors.SECONDARY_SYSTEM_BACKGROUND,
                   borderwidth=0,
                   arrowcolor=AppleColors.TERTIARY_LABEL,
                   troughcolor=AppleColors.SECONDARY_SYSTEM_BACKGROUND)
    
    # === SCALE STYLES ===
    style.configure('TScale',
                   background=AppleColors.SYSTEM_BACKGROUND,
                   troughcolor=AppleColors.SECONDARY_SYSTEM_BACKGROUND,
                   borderwidth=0,
                   slidercolor=AppleColors.SYSTEM_BLUE)
    
    # === CHECKBUTTON STYLES ===
    style.configure('TCheckbutton',
                   background=AppleColors.SYSTEM_BACKGROUND,
                   foreground=AppleColors.LABEL,
                   font=AppleFonts.get("body"),
                   focuscolor=AppleColors.SYSTEM_BLUE)
    
    # === RADIOBUTTON STYLES ===
    style.configure('TRadiobutton',
                   background=AppleColors.SYSTEM_BACKGROUND,
                   foreground=AppleColors.LABEL,
                   font=AppleFonts.get("body"),
                   focuscolor=AppleColors.SYSTEM_BLUE)
    
    # === SEPARATOR STYLES ===
    style.configure('TSeparator',
                   background=AppleColors.SEPARATOR)


def style_text_widget(text_widget):
    """Apply Apple styling to Text widgets"""
    text_widget.configure(
        bg=AppleColors.TEXT_BACKGROUND,
        fg=AppleColors.LABEL,
        selectbackground=AppleColors.SELECTED_TEXT_BACKGROUND,
        selectforeground=AppleColors.SELECTED_TEXT_COLOR,
        font=AppleFonts.get("body"),
        borderwidth=1,
        relief='solid',
        highlightbackground=AppleColors.SEPARATOR,
        highlightcolor=AppleColors.SYSTEM_BLUE,
        highlightthickness=1,
        insertbackground=AppleColors.SYSTEM_BLUE,
        insertwidth=2,
        wrap=tk.WORD,
        padx=8,
        pady=6
    )


def style_listbox(listbox_widget):
    """Apply Apple styling to Listbox widgets"""
    listbox_widget.configure(
        bg=AppleColors.SYSTEM_BACKGROUND,
        fg=AppleColors.LABEL,
        selectbackground=AppleColors.SELECTED_TEXT_BACKGROUND,
        selectforeground=AppleColors.SELECTED_TEXT_COLOR,
        font=AppleFonts.get("body"),
        borderwidth=1,
        relief='solid',
        highlightbackground=AppleColors.SEPARATOR,
        highlightcolor=AppleColors.SYSTEM_BLUE,
        highlightthickness=1,
        activestyle='none'
    )


def create_title_label(parent, text, level="title_2"):
    """Create Apple-style title label"""
    font_map = {
        "large_title": AppleFonts.get("large_title", "bold"),
        "title_1": AppleFonts.get("title_1", "bold"),
        "title_2": AppleFonts.get("title_2", "bold"),
        "headline": AppleFonts.get("headline", "bold")
    }
    
    return ttk.Label(parent,
                    text=text,
                    font=font_map.get(level, AppleFonts.get("title_2", "bold")),
                    foreground=AppleColors.LABEL)


def create_body_label(parent, text, secondary=False):
    """Create Apple-style body label"""
    color = AppleColors.SECONDARY_LABEL if secondary else AppleColors.LABEL
    return ttk.Label(parent,
                    text=text,
                    font=AppleFonts.get("body"),
                    foreground=color)


def create_primary_button(parent, text, command=None):
    """Create Apple-style primary button"""
    return ttk.Button(parent,
                     text=text,
                     command=command,
                     style='TButton')


def create_secondary_button(parent, text, command=None):
    """Create Apple-style secondary button"""
    return ttk.Button(parent,
                     text=text,
                     command=command,
                     style='Secondary.TButton')


def create_status_label(parent, text, status=None):
    """Create status label with appropriate color"""
    color = get_semantic_color(status) if status else AppleColors.LABEL
    return ttk.Label(parent,
                    text=text,
                    font=AppleFonts.get("callout"),
                    foreground=color)


# Spacing utilities (8pt grid system)
class Spacing:
    """Apple 8pt grid spacing system"""
    XXS = 2
    XS = 4
    S = 8
    M = 12
    L = 16
    XL = 20
    XXL = 24
    XXXL = 32


# =============================================================================
# COMPATIBILITY FUNCTIONS (for existing code)
# =============================================================================

def get_available_themes():
    """Compatibility function - no themes available"""
    return ["Apple Design Guidelines"]

def toggle_theme():
    """Compatibility function - no-op"""
    pass

def get_theme_info():
    """Compatibility function - return basic info"""
    return {
        "current_theme": "apple",
        "theme_name": "Apple Design Guidelines",
        "total_themes": 1,
        "description": "Clean, professional styling following Apple Human Interface Guidelines"
    }

def set_adaptive_mode(mode):
    """Compatibility function - no-op"""
    pass

def enable_transitions(enabled=True):
    """Compatibility function - no-op"""
    pass

# Compatibility class
class ThemeManager:
    """Compatibility theme manager class"""
    
    def __init__(self):
        self.current_theme = "apple"
    
    def apply_theme(self, theme_name=None, widget=None):
        """Apply Apple styling"""
        apply_theme(theme_name, widget)
    
    def get_color(self, color_name):
        """Get color by name"""
        return get_color(color_name)
    
    def get_semantic_color(self, status):
        """Get semantic color"""
        return get_semantic_color(status)

# Global instance for compatibility
theme_manager = ThemeManager()


# =============================================================================
# UTILITY FUNCTIONS FOR ENHANCED APPEARANCE
# =============================================================================

def add_drop_shadow_effect(widget):
    """Add subtle drop shadow effect (visual only, no actual shadow)"""
    # This creates a visual effect by using a slightly darker border
    if hasattr(widget, 'configure'):
        try:
            widget.configure(relief='solid', borderwidth=1)
        except:
            pass

def create_card_frame(parent, padding=16):
    """Create a card-like frame with Apple styling"""
    frame = ttk.Frame(parent)
    frame.configure(style='TFrame')
    return frame

def create_section_separator(parent):
    """Create a visual section separator"""
    separator = ttk.Separator(parent, orient='horizontal')
    separator.configure(style='TSeparator')
    return separator

def apply_window_styling(window):
    """Apply comprehensive window styling"""
    # Set window background
    window.configure(bg=AppleColors.WINDOW_BACKGROUND)
    
    # Apply ttk styling
    apply_theme(widget=window)
    
    # Configure window properties for better appearance
    try:
        # Set minimum size for better proportions
        window.minsize(400, 300)
        
        # Center window if it's a new window
        if isinstance(window, tk.Toplevel):
            window.update_idletasks()
            x = (window.winfo_screenwidth() // 2) - (window.winfo_width() // 2)
            y = (window.winfo_screenheight() // 2) - (window.winfo_height() // 2)
            window.geometry(f"+{x}+{y}")
    except:
        pass

def configure_main_window(root):
    """Configure main application window with Apple styling"""
    # Apply Apple styling
    apply_window_styling(root)
    
    # Set icon if available (you can add your app icon here)
    try:
        # root.iconphoto(True, your_icon)
        pass
    except:
        pass
    
    # Configure window appearance
    root.configure(bg=AppleColors.WINDOW_BACKGROUND)
    
    # Set focus highlight color globally
    root.option_add('*highlightColor', AppleColors.SYSTEM_BLUE)
    root.option_add('*insertBackground', AppleColors.SYSTEM_BLUE)


# =============================================================================
# EXAMPLE USAGE AND TESTING
# =============================================================================

if __name__ == "__main__":
    # Demo application showing Apple Design Guidelines
    root = tk.Tk()
    root.title("Apple Design Guidelines Demo - ReqIF Tool Suite")
    root.geometry("700x500")
    
    # Apply comprehensive styling
    configure_main_window(root)
    
    # Main container
    main_frame = ttk.Frame(root, padding="20")
    main_frame.pack(fill=tk.BOTH, expand=True)
    
    # Header section
    header_frame = ttk.Frame(main_frame)
    header_frame.pack(fill=tk.X, pady=(0, Spacing.L))
    
    title = create_title_label(header_frame, "ReqIF Tool Suite", "title_1")
    title.pack(anchor=tk.W)
    
    subtitle = create_body_label(header_frame, "Apple Design Guidelines Implementation", secondary=True)
    subtitle.pack(anchor=tk.W, pady=(4, 0))
    
    # Section separator
    sep1 = create_section_separator(main_frame)
    sep1.pack(fill=tk.X, pady=Spacing.M)
    
    # Content section
    content_frame = ttk.Frame(main_frame)
    content_frame.pack(fill=tk.BOTH, expand=True)
    
    # Notebook demo
    notebook = ttk.Notebook(content_frame)
    notebook.pack(fill=tk.BOTH, expand=True, pady=(0, Spacing.L))
    
    # Tab 1: Controls demo
    tab1 = ttk.Frame(notebook, padding="20")
    notebook.add(tab1, text="Controls Demo")
    
    create_title_label(tab1, "Form Controls", "headline").pack(anchor=tk.W, pady=(0, Spacing.M))
    
    # Entry field
    create_body_label(tab1, "Text Input:").pack(anchor=tk.W, pady=(0, 4))
    entry = ttk.Entry(tab1, width=40)
    entry.pack(anchor=tk.W, pady=(0, Spacing.M))
    entry.insert(0, "Sample text input")
    
    # Buttons
    button_frame = ttk.Frame(tab1)
    button_frame.pack(anchor=tk.W, pady=(0, Spacing.M))
    
    primary_btn = create_primary_button(button_frame, "Primary Action")
    primary_btn.pack(side=tk.LEFT, padx=(0, Spacing.S))
    
    secondary_btn = create_secondary_button(button_frame, "Secondary Action")
    secondary_btn.pack(side=tk.LEFT)
    
    # Status examples
    create_body_label(tab1, "Status Examples:").pack(anchor=tk.W, pady=(Spacing.L, 4))
    
    status_frame = ttk.Frame(tab1)
    status_frame.pack(anchor=tk.W)
    
    statuses = [("Success", "success"), ("Warning", "warning"), ("Error", "error"), ("Info", "info")]
    for text, status in statuses:
        status_label = create_status_label(status_frame, text, status)
        status_label.pack(side=tk.LEFT, padx=(0, Spacing.M))
    
    # Tab 2: Data demo
    tab2 = ttk.Frame(notebook, padding="20")
    notebook.add(tab2, text="Data Display")
    
    create_title_label(tab2, "Treeview Example", "headline").pack(anchor=tk.W, pady=(0, Spacing.M))
    
    # Treeview
    tree = ttk.Treeview(tab2, columns=('type', 'status'), show='tree headings', height=8)
    tree.pack(fill=tk.BOTH, expand=True)
    
    tree.heading('#0', text='Requirement ID', anchor=tk.W)
    tree.heading('type', text='Type', anchor=tk.W)
    tree.heading('status', text='Status', anchor=tk.W)
    
    # Sample data
    tree.insert('', 'end', text='REQ-001', values=('Functional', 'Approved'))
    tree.insert('', 'end', text='REQ-002', values=('Non-functional', 'Draft'))
    tree.insert('', 'end', text='REQ-003', values=('Interface', 'Rejected'))
    
    # Status bar
    status_frame = ttk.Frame(main_frame)
    status_frame.pack(fill=tk.X, pady=(Spacing.M, 0))
    
    status_label = create_body_label(status_frame, "Ready - Apple Design Guidelines Applied", secondary=True)
    status_label.pack(side=tk.LEFT)
    
    # Color demo label
    color_info = ttk.Label(status_frame, 
                          text=f"Colors: {AppleColors.SYSTEM_BLUE} (Primary)",
                          font=AppleFonts.get("caption"),
                          foreground=AppleColors.TERTIARY_LABEL)
    color_info.pack(side=tk.RIGHT)
    
    root.mainloop()